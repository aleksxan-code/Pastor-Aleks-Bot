
from __future__ import annotations

import os
import logging
from typing import Dict, List, Literal, Optional

from telegram import (
    Update, Message,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters, PicklePersistence
)

# ---------------- Config ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID_ENV = os.getenv("ADMIN_CHAT_ID")  # may be negative for supergroups
AUTO_REPLY = os.getenv("AUTO_REPLY", "1") in {"1", "true", "True", "yes", "YES"}

Lang = Literal["ru", "en", "uk"]

LANG_BTNS: List[List[tuple[str, str]]] = [[
    ("–†—É—Å—Å–∫–∏–π üá∑üá∫", "lang:ru"),
    ("English üá¨üáß", "lang:en"),
    ("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "lang:uk"),
]]

MENU_ITEMS: Dict[Lang, List[str]] = {
    "ru": [
        "üí° –ï—Å—Ç—å –∏–¥–µ—è",
        "ü§ù –°–ª—É–∂–µ–Ω–∏–µ –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ",
        "üè† –ù—É–∂–¥–∞—é—Å—å –≤ –ø–æ—Å–µ—â–µ–Ω–∏–∏",
        "üôè –õ–∏—á–Ω–∞—è –º–æ–ª–∏—Ç–≤–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "üìñ –í—Å—Ç—Ä–µ—á–∞ —Å –ø–∞—Å—Ç–æ—Ä–æ–º",
    ],
    "en": [
        "üí° I have an idea",
        "ü§ù Ministry & volunteering",
        "üè† I need a visit",
        "üôè Personal prayer & support",
        "üìñ Meet the pastor",
    ],
    "uk": [
        "üí° –Ñ —ñ–¥–µ—è",
        "ü§ù –°–ª—É–∂—ñ–Ω–Ω—è —Ç–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ",
        "üè† –ü–æ—Ç—Ä–µ–±—É—é –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è",
        "üôè –û—Å–æ–±–∏—Å—Ç–∞ –º–æ–ª–∏—Ç–≤–∞ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        "üìñ –ó—É—Å—Ç—Ä—ñ—á –∑ –ø–∞—Å—Ç–æ—Ä–æ–º",
    ],
}

PROMPTS = {
    "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
    "en": "Choose a category:",
    "uk": "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
}

CHANGE_LANG_BTN = {
    "ru": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
    "en": "üåê Change language",
    "uk": "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
}

FINISH_BTN = {
    "ru": "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
    "en": "üîö Finish",
    "uk": "üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏",
}

ACK_TEXT = {
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
    "en": "‚úÖ Thank you! We will get back to you.",
    "uk": "‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏.",
}

GOODBYE_TEXT = {
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start",
    "en": "‚úÖ Thank you for chatting! To return, just type /start",
    "uk": "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start",
}

TRILINGUAL_GREETING = (
    "<b>–ü—Ä–∏–≤–µ—Ç!</b> –ü–∞—Å—Ç–æ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –•–∞–Ω—á–µ–≤—Å–∫–∏–π —Ä–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è.\n"
    "–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ç–µ–±—è —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.\n\n"
    "<b>Hello!</b> Pastor Aleksandr Khanchevskii is glad to chat with you.\n"
    "Please choose the language you prefer.\n\n"
    "<b>–í—ñ—Ç–∞—é!</b> –ü–∞—Å—Ç–æ—Ä –û–ª–µ–∫—Å–∞–Ω–¥—Ä –•–∞–Ω—á–µ–≤—Å—å–∫–∏–π —Ä–∞–¥–∏–π –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è.\n"
    "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –º–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –Ω–∏–∂—á–µ."
)

# --------------- Helpers ----------------
def admin_chat_id() -> int:
    if not ADMIN_CHAT_ID_ENV:
        raise RuntimeError("Set ADMIN_CHAT_ID env var (admin/group chat id)")
    try:
        return int(ADMIN_CHAT_ID_ENV)
    except ValueError:
        raise RuntimeError("ADMIN_CHAT_ID must be an integer (can be negative for groups)")

def lang_inline_keyboard() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text, callback_data=data) for text, data in LANG_BTNS[0]]]
    return InlineKeyboardMarkup(rows)

def menu_inline_keyboard(lang: Lang) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(title, callback_data=f"cat:{title}")] for title in MENU_ITEMS[lang]]
    rows.append([InlineKeyboardButton(CHANGE_LANG_BTN[lang], callback_data="change_lang")])
    rows.append([InlineKeyboardButton(FINISH_BTN[lang], callback_data="finish")])
    return InlineKeyboardMarkup(rows)

def is_menu_item(text: str, lang: Optional[Lang]) -> bool:
    return bool(lang and text in MENU_ITEMS[lang])

async def show_menu(update_or_msg, lang: Lang) -> None:
    msg = update_or_msg.effective_message if isinstance(update_or_msg, Update) else update_or_msg
    await msg.reply_text(
        PROMPTS[lang],
        reply_markup=menu_inline_keyboard(lang)
    )

# --------------- Handlers ---------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    await update.effective_message.reply_text(
        TRILINGUAL_GREETING,
        reply_markup=lang_inline_keyboard(),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    data = query.data or ""
    ud = context.user_data
    try:
        if data.startswith("lang:"):
            lang: Lang = data.split(":", 1)[1]
            ud["lang"] = lang
            ud.pop("category", None)
            await query.answer()
            await query.message.reply_text(
                PROMPTS[lang],
                reply_markup=menu_inline_keyboard(lang),
            )
            return

        if data == "change_lang":
            ud.pop("category", None)
            ud.pop("lang", None)
            await query.answer()
            # remove inline keyboard from the pressed message (visual cleanup)
            try:
                await query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await query.message.reply_text(
                TRILINGUAL_GREETING,
                reply_markup=lang_inline_keyboard(),
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )
            return

        if data == "finish":
            lang = ud.get("lang", "ru")
            # clear session
            ud.clear()
            await query.answer()
            # remove inline keyboard from the pressed message
            try:
                await query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            # send goodbye without any keyboard
            await query.message.reply_text(GOODBYE_TEXT.get(lang, GOODBYE_TEXT["en"]))
            return

        if data.startswith("cat:"):
            category = data.split(":", 1)[1]
            ud["category"] = category
            await query.answer()
            return
    except Exception as e:
        logging.exception("Callback error: %s", e)
        try:
            await query.answer()
        except Exception:
            pass

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    text = msg.text or ""
    lang: Optional[Lang] = context.user_data.get("lang")
    category: Optional[str] = context.user_data.get("category")

    if is_menu_item(text, lang):
        context.user_data["category"] = text
        return

    # After category chosen -> forward/copy ANY subsequent message to admin,
    # optional ack to the user, then reset category and show menu again.
    if category and lang:
        header = (
            f"üì® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.full_name} (id={msg.from_user.id})\n"
            f"‚Ä¢ –Ø–∑—ã–∫: {lang or '‚Äî'}\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"‚Ä¢ –ò–∑ —á–∞—Ç–∞: {update.effective_chat.id}"
        )
        try:
            await context.bot.send_message(chat_id=admin_chat_id(), text=header)
            await msg.copy(chat_id=admin_chat_id())
        except Exception as e:
            logging.exception("Failed to copy message to admin: %s", e)

        if AUTO_REPLY:
            try:
                await msg.reply_text(ACK_TEXT[lang])
            except Exception:
                pass

        context.user_data.pop("category", None)
        await show_menu(update, lang)
        return

    if not lang:
        await msg.reply_text(
            TRILINGUAL_GREETING,
            reply_markup=lang_inline_keyboard(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return

    await show_menu(update, lang)

# --------------- Entrypoint -------------
def main() -> None:
    logging.basicConfig(level=logging.INFO)

    if not BOT_TOKEN:
        raise RuntimeError("Set BOT_TOKEN env var")
    _ = admin_chat_id()

    persistence = PicklePersistence(filepath="bot_state.pkl")

    app = ApplicationBuilder().token(BOT_TOKEN).persistence(persistence).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(~filters.COMMAND, on_message))
    app.run_polling()

if __name__ == "__main__":
    main()
